<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="374" onload="init(evt)" viewBox="0 0 1200 374" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="374" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="357.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="357.00"> </text><svg id="frames" x="10" width="1180" total_samples="4497"><g><title>[[stack]] (1 samples, 0.02%)</title><rect x="0.0000%" y="293" width="0.0222%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="1"/><text x="0.2500%" y="303.50"></text></g><g><title>[libc.so.6] (1 samples, 0.02%)</title><rect x="0.0000%" y="277" width="0.0222%" height="15" fill="rgb(217,0,24)" fg:x="0" fg:w="1"/><text x="0.2500%" y="287.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="0.0000%" y="261" width="0.0222%" height="15" fill="rgb(221,193,54)" fg:x="0" fg:w="1"/><text x="0.2500%" y="271.50"></text></g><g><title>[ld-linux-x86-64.so.2] (1 samples, 0.02%)</title><rect x="0.0889%" y="245" width="0.0222%" height="15" fill="rgb(248,212,6)" fg:x="4" fg:w="1"/><text x="0.3389%" y="255.50"></text></g><g><title>[ld-linux-x86-64.so.2] (1 samples, 0.02%)</title><rect x="0.0889%" y="229" width="0.0222%" height="15" fill="rgb(208,68,35)" fg:x="4" fg:w="1"/><text x="0.3389%" y="239.50"></text></g><g><title>[ld-linux-x86-64.so.2] (1 samples, 0.02%)</title><rect x="0.0889%" y="213" width="0.0222%" height="15" fill="rgb(232,128,0)" fg:x="4" fg:w="1"/><text x="0.3389%" y="223.50"></text></g><g><title>[ld-linux-x86-64.so.2] (1 samples, 0.02%)</title><rect x="0.0889%" y="197" width="0.0222%" height="15" fill="rgb(207,160,47)" fg:x="4" fg:w="1"/><text x="0.3389%" y="207.50"></text></g><g><title>[ld-linux-x86-64.so.2] (2 samples, 0.04%)</title><rect x="0.0889%" y="261" width="0.0445%" height="15" fill="rgb(228,23,34)" fg:x="4" fg:w="2"/><text x="0.3389%" y="271.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="0.1112%" y="245" width="0.0222%" height="15" fill="rgb(218,30,26)" fg:x="5" fg:w="1"/><text x="0.3612%" y="255.50"></text></g><g><title>[ld-linux-x86-64.so.2] (6 samples, 0.13%)</title><rect x="0.0222%" y="277" width="0.1334%" height="15" fill="rgb(220,122,19)" fg:x="1" fg:w="6"/><text x="0.2722%" y="287.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="0.1334%" y="261" width="0.0222%" height="15" fill="rgb(250,228,42)" fg:x="6" fg:w="1"/><text x="0.3834%" y="271.50"></text></g><g><title>[ld-linux-x86-64.so.2] (7 samples, 0.16%)</title><rect x="0.0222%" y="293" width="0.1557%" height="15" fill="rgb(240,193,28)" fg:x="1" fg:w="7"/><text x="0.2722%" y="303.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="0.1557%" y="277" width="0.0222%" height="15" fill="rgb(216,20,37)" fg:x="7" fg:w="1"/><text x="0.4057%" y="287.50"></text></g><g><title>ByteStream::eof (1 samples, 0.02%)</title><rect x="0.2891%" y="213" width="0.0222%" height="15" fill="rgb(206,188,39)" fg:x="13" fg:w="1"/><text x="0.5391%" y="223.50"></text></g><g><title>_mcount (1 samples, 0.02%)</title><rect x="0.2891%" y="197" width="0.0222%" height="15" fill="rgb(217,207,13)" fg:x="13" fg:w="1"/><text x="0.5391%" y="207.50"></text></g><g><title>[libc.so.6] (1 samples, 0.02%)</title><rect x="0.2891%" y="181" width="0.0222%" height="15" fill="rgb(231,73,38)" fg:x="13" fg:w="1"/><text x="0.5391%" y="191.50"></text></g><g><title>[libc.so.6] (98 samples, 2.18%)</title><rect x="0.3113%" y="213" width="2.1792%" height="15" fill="rgb(225,20,46)" fg:x="14" fg:w="98"/><text x="0.5613%" y="223.50">[..</text></g><g><title>[unknown] (34 samples, 0.76%)</title><rect x="1.7345%" y="197" width="0.7561%" height="15" fill="rgb(210,31,41)" fg:x="78" fg:w="34"/><text x="1.9845%" y="207.50"></text></g><g><title>[unknown] (19 samples, 0.42%)</title><rect x="2.0680%" y="181" width="0.4225%" height="15" fill="rgb(221,200,47)" fg:x="93" fg:w="19"/><text x="2.3180%" y="191.50"></text></g><g><title>[unknown] (16 samples, 0.36%)</title><rect x="2.1348%" y="165" width="0.3558%" height="15" fill="rgb(226,26,5)" fg:x="96" fg:w="16"/><text x="2.3848%" y="175.50"></text></g><g><title>[unknown] (14 samples, 0.31%)</title><rect x="2.1792%" y="149" width="0.3113%" height="15" fill="rgb(249,33,26)" fg:x="98" fg:w="14"/><text x="2.4292%" y="159.50"></text></g><g><title>[unknown] (5 samples, 0.11%)</title><rect x="2.3794%" y="133" width="0.1112%" height="15" fill="rgb(235,183,28)" fg:x="107" fg:w="5"/><text x="2.6294%" y="143.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="2.4683%" y="117" width="0.0222%" height="15" fill="rgb(221,5,38)" fg:x="111" fg:w="1"/><text x="2.7183%" y="127.50"></text></g><g><title>[libc.so.6] (11 samples, 0.24%)</title><rect x="2.5128%" y="181" width="0.2446%" height="15" fill="rgb(247,18,42)" fg:x="113" fg:w="11"/><text x="2.7628%" y="191.50"></text></g><g><title>ByteStream::read[abi:cxx11] (16 samples, 0.36%)</title><rect x="2.4905%" y="197" width="0.3558%" height="15" fill="rgb(241,131,45)" fg:x="112" fg:w="16"/><text x="2.7405%" y="207.50"></text></g><g><title>operator new (4 samples, 0.09%)</title><rect x="2.7574%" y="181" width="0.0889%" height="15" fill="rgb(249,31,29)" fg:x="124" fg:w="4"/><text x="3.0074%" y="191.50"></text></g><g><title>malloc (4 samples, 0.09%)</title><rect x="2.7574%" y="165" width="0.0889%" height="15" fill="rgb(225,111,53)" fg:x="124" fg:w="4"/><text x="3.0074%" y="175.50"></text></g><g><title>[libc.so.6] (3 samples, 0.07%)</title><rect x="2.7796%" y="149" width="0.0667%" height="15" fill="rgb(238,160,17)" fg:x="125" fg:w="3"/><text x="3.0296%" y="159.50"></text></g><g><title>[libc.so.6] (2 samples, 0.04%)</title><rect x="2.8019%" y="133" width="0.0445%" height="15" fill="rgb(214,148,48)" fg:x="126" fg:w="2"/><text x="3.0519%" y="143.50"></text></g><g><title>_mcount (1 samples, 0.02%)</title><rect x="2.8463%" y="165" width="0.0222%" height="15" fill="rgb(232,36,49)" fg:x="128" fg:w="1"/><text x="3.0963%" y="175.50"></text></g><g><title>TCPConnection::send_segments (2 samples, 0.04%)</title><rect x="2.8463%" y="197" width="0.0445%" height="15" fill="rgb(209,103,24)" fg:x="128" fg:w="2"/><text x="3.0963%" y="207.50"></text></g><g><title>TCPReceiver::ackno (2 samples, 0.04%)</title><rect x="2.8463%" y="181" width="0.0445%" height="15" fill="rgb(229,88,8)" fg:x="128" fg:w="2"/><text x="3.0963%" y="191.50"></text></g><g><title>wrap (1 samples, 0.02%)</title><rect x="2.8686%" y="165" width="0.0222%" height="15" fill="rgb(213,181,19)" fg:x="129" fg:w="1"/><text x="3.1186%" y="175.50"></text></g><g><title>_mcount (1 samples, 0.02%)</title><rect x="2.8686%" y="149" width="0.0222%" height="15" fill="rgb(254,191,54)" fg:x="129" fg:w="1"/><text x="3.1186%" y="159.50"></text></g><g><title>[libc.so.6] (1 samples, 0.02%)</title><rect x="2.8686%" y="133" width="0.0222%" height="15" fill="rgb(241,83,37)" fg:x="129" fg:w="1"/><text x="3.1186%" y="143.50"></text></g><g><title>[libc.so.6] (1 samples, 0.02%)</title><rect x="2.9131%" y="165" width="0.0222%" height="15" fill="rgb(233,36,39)" fg:x="131" fg:w="1"/><text x="3.1631%" y="175.50"></text></g><g><title>ByteStream::write (10 samples, 0.22%)</title><rect x="2.8908%" y="181" width="0.2224%" height="15" fill="rgb(226,3,54)" fg:x="130" fg:w="10"/><text x="3.1408%" y="191.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_append (8 samples, 0.18%)</title><rect x="2.9353%" y="165" width="0.1779%" height="15" fill="rgb(245,192,40)" fg:x="132" fg:w="8"/><text x="3.1853%" y="175.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_S_copy (8 samples, 0.18%)</title><rect x="2.9353%" y="149" width="0.1779%" height="15" fill="rgb(238,167,29)" fg:x="132" fg:w="8"/><text x="3.1853%" y="159.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_S_copy (8 samples, 0.18%)</title><rect x="2.9353%" y="133" width="0.1779%" height="15" fill="rgb(232,182,51)" fg:x="132" fg:w="8"/><text x="3.1853%" y="143.50"></text></g><g><title>std::char_traits&lt;char&gt;::copy (8 samples, 0.18%)</title><rect x="2.9353%" y="117" width="0.1779%" height="15" fill="rgb(231,60,39)" fg:x="132" fg:w="8"/><text x="3.1853%" y="127.50"></text></g><g><title>[libc.so.6] (8 samples, 0.18%)</title><rect x="2.9353%" y="101" width="0.1779%" height="15" fill="rgb(208,69,12)" fg:x="132" fg:w="8"/><text x="3.1853%" y="111.50"></text></g><g><title>TCPConnection::write (11 samples, 0.24%)</title><rect x="2.8908%" y="197" width="0.2446%" height="15" fill="rgb(235,93,37)" fg:x="130" fg:w="11"/><text x="3.1408%" y="207.50"></text></g><g><title>TCPConnection::send_segments (1 samples, 0.02%)</title><rect x="3.1132%" y="181" width="0.0222%" height="15" fill="rgb(213,116,39)" fg:x="140" fg:w="1"/><text x="3.3632%" y="191.50"></text></g><g><title>ByteStream::input_ended (1 samples, 0.02%)</title><rect x="3.1132%" y="165" width="0.0222%" height="15" fill="rgb(222,207,29)" fg:x="140" fg:w="1"/><text x="3.3632%" y="175.50"></text></g><g><title>_mcount (1 samples, 0.02%)</title><rect x="3.1132%" y="149" width="0.0222%" height="15" fill="rgb(206,96,30)" fg:x="140" fg:w="1"/><text x="3.3632%" y="159.50"></text></g><g><title>[libc.so.6] (21 samples, 0.47%)</title><rect x="3.1354%" y="197" width="0.4670%" height="15" fill="rgb(218,138,4)" fg:x="141" fg:w="21"/><text x="3.3854%" y="207.50"></text></g><g><title>ByteStream::bytes_written (9 samples, 0.20%)</title><rect x="3.7136%" y="165" width="0.2001%" height="15" fill="rgb(250,191,14)" fg:x="167" fg:w="9"/><text x="3.9636%" y="175.50"></text></g><g><title>_mcount (9 samples, 0.20%)</title><rect x="3.7136%" y="149" width="0.2001%" height="15" fill="rgb(239,60,40)" fg:x="167" fg:w="9"/><text x="3.9636%" y="159.50"></text></g><g><title>[libc.so.6] (8 samples, 0.18%)</title><rect x="3.7358%" y="133" width="0.1779%" height="15" fill="rgb(206,27,48)" fg:x="168" fg:w="8"/><text x="3.9858%" y="143.50"></text></g><g><title>ByteStream::eof (5 samples, 0.11%)</title><rect x="3.9137%" y="165" width="0.1112%" height="15" fill="rgb(225,35,8)" fg:x="176" fg:w="5"/><text x="4.1637%" y="175.50"></text></g><g><title>_mcount (5 samples, 0.11%)</title><rect x="3.9137%" y="149" width="0.1112%" height="15" fill="rgb(250,213,24)" fg:x="176" fg:w="5"/><text x="4.1637%" y="159.50"></text></g><g><title>[libc.so.6] (5 samples, 0.11%)</title><rect x="3.9137%" y="133" width="0.1112%" height="15" fill="rgb(247,123,22)" fg:x="176" fg:w="5"/><text x="4.1637%" y="143.50"></text></g><g><title>ByteStream::input_ended (2 samples, 0.04%)</title><rect x="4.0249%" y="165" width="0.0445%" height="15" fill="rgb(231,138,38)" fg:x="181" fg:w="2"/><text x="4.2749%" y="175.50"></text></g><g><title>_mcount (1 samples, 0.02%)</title><rect x="4.0471%" y="149" width="0.0222%" height="15" fill="rgb(231,145,46)" fg:x="182" fg:w="1"/><text x="4.2971%" y="159.50"></text></g><g><title>[libc.so.6] (1 samples, 0.02%)</title><rect x="4.0471%" y="133" width="0.0222%" height="15" fill="rgb(251,118,11)" fg:x="182" fg:w="1"/><text x="4.2971%" y="143.50"></text></g><g><title>ByteStream::end_input (3 samples, 0.07%)</title><rect x="4.1139%" y="149" width="0.0667%" height="15" fill="rgb(217,147,25)" fg:x="185" fg:w="3"/><text x="4.3639%" y="159.50"></text></g><g><title>_mcount (3 samples, 0.07%)</title><rect x="4.1139%" y="133" width="0.0667%" height="15" fill="rgb(247,81,37)" fg:x="185" fg:w="3"/><text x="4.3639%" y="143.50"></text></g><g><title>[libc.so.6] (3 samples, 0.07%)</title><rect x="4.1139%" y="117" width="0.0667%" height="15" fill="rgb(209,12,38)" fg:x="185" fg:w="3"/><text x="4.3639%" y="127.50"></text></g><g><title>ByteStream::buffer_size (3 samples, 0.07%)</title><rect x="4.3140%" y="133" width="0.0667%" height="15" fill="rgb(227,1,9)" fg:x="194" fg:w="3"/><text x="4.5640%" y="143.50"></text></g><g><title>_mcount (2 samples, 0.04%)</title><rect x="4.3362%" y="117" width="0.0445%" height="15" fill="rgb(248,47,43)" fg:x="195" fg:w="2"/><text x="4.5862%" y="127.50"></text></g><g><title>[libc.so.6] (2 samples, 0.04%)</title><rect x="4.3362%" y="101" width="0.0445%" height="15" fill="rgb(221,10,30)" fg:x="195" fg:w="2"/><text x="4.5862%" y="111.50"></text></g><g><title>ByteStream::bytes_read (7 samples, 0.16%)</title><rect x="4.3807%" y="133" width="0.1557%" height="15" fill="rgb(210,229,1)" fg:x="197" fg:w="7"/><text x="4.6307%" y="143.50"></text></g><g><title>_mcount (7 samples, 0.16%)</title><rect x="4.3807%" y="117" width="0.1557%" height="15" fill="rgb(222,148,37)" fg:x="197" fg:w="7"/><text x="4.6307%" y="127.50"></text></g><g><title>[libc.so.6] (6 samples, 0.13%)</title><rect x="4.4029%" y="101" width="0.1334%" height="15" fill="rgb(234,67,33)" fg:x="198" fg:w="6"/><text x="4.6529%" y="111.50"></text></g><g><title>ByteStream::bytes_written (4 samples, 0.09%)</title><rect x="4.5364%" y="133" width="0.0889%" height="15" fill="rgb(247,98,35)" fg:x="204" fg:w="4"/><text x="4.7864%" y="143.50"></text></g><g><title>_mcount (4 samples, 0.09%)</title><rect x="4.5364%" y="117" width="0.0889%" height="15" fill="rgb(247,138,52)" fg:x="204" fg:w="4"/><text x="4.7864%" y="127.50"></text></g><g><title>[libc.so.6] (4 samples, 0.09%)</title><rect x="4.5364%" y="101" width="0.0889%" height="15" fill="rgb(213,79,30)" fg:x="204" fg:w="4"/><text x="4.7864%" y="111.50"></text></g><g><title>[libc.so.6] (2 samples, 0.04%)</title><rect x="4.6698%" y="117" width="0.0445%" height="15" fill="rgb(246,177,23)" fg:x="210" fg:w="2"/><text x="4.9198%" y="127.50"></text></g><g><title>_mcount (2 samples, 0.04%)</title><rect x="4.7143%" y="117" width="0.0445%" height="15" fill="rgb(230,62,27)" fg:x="212" fg:w="2"/><text x="4.9643%" y="127.50"></text></g><g><title>[libc.so.6] (1 samples, 0.02%)</title><rect x="4.7365%" y="101" width="0.0222%" height="15" fill="rgb(216,154,8)" fg:x="213" fg:w="1"/><text x="4.9865%" y="111.50"></text></g><g><title>cfree (1 samples, 0.02%)</title><rect x="4.7587%" y="117" width="0.0222%" height="15" fill="rgb(244,35,45)" fg:x="214" fg:w="1"/><text x="5.0087%" y="127.50"></text></g><g><title>operator new (1 samples, 0.02%)</title><rect x="4.7810%" y="117" width="0.0222%" height="15" fill="rgb(251,115,12)" fg:x="215" fg:w="1"/><text x="5.0310%" y="127.50"></text></g><g><title>malloc (1 samples, 0.02%)</title><rect x="4.7810%" y="101" width="0.0222%" height="15" fill="rgb(240,54,50)" fg:x="215" fg:w="1"/><text x="5.0310%" y="111.50"></text></g><g><title>[libc.so.6] (1 samples, 0.02%)</title><rect x="4.7810%" y="85" width="0.0222%" height="15" fill="rgb(233,84,52)" fg:x="215" fg:w="1"/><text x="5.0310%" y="95.50"></text></g><g><title>ByteStream::write (14 samples, 0.31%)</title><rect x="4.6253%" y="133" width="0.3113%" height="15" fill="rgb(207,117,47)" fg:x="208" fg:w="14"/><text x="4.8753%" y="143.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_append (6 samples, 0.13%)</title><rect x="4.8032%" y="117" width="0.1334%" height="15" fill="rgb(249,43,39)" fg:x="216" fg:w="6"/><text x="5.0532%" y="127.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_S_copy (6 samples, 0.13%)</title><rect x="4.8032%" y="101" width="0.1334%" height="15" fill="rgb(209,38,44)" fg:x="216" fg:w="6"/><text x="5.0532%" y="111.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_S_copy (6 samples, 0.13%)</title><rect x="4.8032%" y="85" width="0.1334%" height="15" fill="rgb(236,212,23)" fg:x="216" fg:w="6"/><text x="5.0532%" y="95.50"></text></g><g><title>std::char_traits&lt;char&gt;::copy (6 samples, 0.13%)</title><rect x="4.8032%" y="69" width="0.1334%" height="15" fill="rgb(242,79,21)" fg:x="216" fg:w="6"/><text x="5.0532%" y="79.50"></text></g><g><title>[libc.so.6] (6 samples, 0.13%)</title><rect x="4.8032%" y="53" width="0.1334%" height="15" fill="rgb(211,96,35)" fg:x="216" fg:w="6"/><text x="5.0532%" y="63.50"></text></g><g><title>[libc.so.6] (10 samples, 0.22%)</title><rect x="4.9366%" y="133" width="0.2224%" height="15" fill="rgb(253,215,40)" fg:x="222" fg:w="10"/><text x="5.1866%" y="143.50"></text></g><g><title>_mcount (2 samples, 0.04%)</title><rect x="5.1590%" y="133" width="0.0445%" height="15" fill="rgb(211,81,21)" fg:x="232" fg:w="2"/><text x="5.4090%" y="143.50"></text></g><g><title>[libc.so.6] (2 samples, 0.04%)</title><rect x="5.1590%" y="117" width="0.0445%" height="15" fill="rgb(208,190,38)" fg:x="232" fg:w="2"/><text x="5.4090%" y="127.50"></text></g><g><title>cfree (12 samples, 0.27%)</title><rect x="5.2035%" y="133" width="0.2668%" height="15" fill="rgb(235,213,38)" fg:x="234" fg:w="12"/><text x="5.4535%" y="143.50"></text></g><g><title>[libc.so.6] (9 samples, 0.20%)</title><rect x="5.2702%" y="117" width="0.2001%" height="15" fill="rgb(237,122,38)" fg:x="237" fg:w="9"/><text x="5.5202%" y="127.50"></text></g><g><title>operator new (9 samples, 0.20%)</title><rect x="5.4703%" y="133" width="0.2001%" height="15" fill="rgb(244,218,35)" fg:x="246" fg:w="9"/><text x="5.7203%" y="143.50"></text></g><g><title>malloc (8 samples, 0.18%)</title><rect x="5.4926%" y="117" width="0.1779%" height="15" fill="rgb(240,68,47)" fg:x="247" fg:w="8"/><text x="5.7426%" y="127.50"></text></g><g><title>[libc.so.6] (6 samples, 0.13%)</title><rect x="5.5370%" y="101" width="0.1334%" height="15" fill="rgb(210,16,53)" fg:x="249" fg:w="6"/><text x="5.7870%" y="111.50"></text></g><g><title>[libc.so.6] (3 samples, 0.07%)</title><rect x="5.6037%" y="85" width="0.0667%" height="15" fill="rgb(235,124,12)" fg:x="252" fg:w="3"/><text x="5.8537%" y="95.50"></text></g><g><title>operator new (5 samples, 0.11%)</title><rect x="5.6927%" y="101" width="0.1112%" height="15" fill="rgb(224,169,11)" fg:x="256" fg:w="5"/><text x="5.9427%" y="111.50"></text></g><g><title>malloc (5 samples, 0.11%)</title><rect x="5.6927%" y="85" width="0.1112%" height="15" fill="rgb(250,166,2)" fg:x="256" fg:w="5"/><text x="5.9427%" y="95.50"></text></g><g><title>[libc.so.6] (5 samples, 0.11%)</title><rect x="5.6927%" y="69" width="0.1112%" height="15" fill="rgb(242,216,29)" fg:x="256" fg:w="5"/><text x="5.9427%" y="79.50"></text></g><g><title>[libc.so.6] (3 samples, 0.07%)</title><rect x="5.7372%" y="53" width="0.0667%" height="15" fill="rgb(230,116,27)" fg:x="258" fg:w="3"/><text x="5.9872%" y="63.50"></text></g><g><title>[libc.so.6] (1 samples, 0.02%)</title><rect x="5.7816%" y="37" width="0.0222%" height="15" fill="rgb(228,99,48)" fg:x="260" fg:w="1"/><text x="6.0316%" y="47.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_mutate (8 samples, 0.18%)</title><rect x="5.6704%" y="117" width="0.1779%" height="15" fill="rgb(253,11,6)" fg:x="255" fg:w="8"/><text x="5.9204%" y="127.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_S_copy (2 samples, 0.04%)</title><rect x="5.8039%" y="101" width="0.0445%" height="15" fill="rgb(247,143,39)" fg:x="261" fg:w="2"/><text x="6.0539%" y="111.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_S_copy (2 samples, 0.04%)</title><rect x="5.8039%" y="85" width="0.0445%" height="15" fill="rgb(236,97,10)" fg:x="261" fg:w="2"/><text x="6.0539%" y="95.50"></text></g><g><title>std::char_traits&lt;char&gt;::copy (2 samples, 0.04%)</title><rect x="5.8039%" y="69" width="0.0445%" height="15" fill="rgb(233,208,19)" fg:x="261" fg:w="2"/><text x="6.0539%" y="79.50"></text></g><g><title>[libc.so.6] (2 samples, 0.04%)</title><rect x="5.8039%" y="53" width="0.0445%" height="15" fill="rgb(216,164,2)" fg:x="261" fg:w="2"/><text x="6.0539%" y="63.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_S_copy (2 samples, 0.04%)</title><rect x="5.8483%" y="117" width="0.0445%" height="15" fill="rgb(220,129,5)" fg:x="263" fg:w="2"/><text x="6.0983%" y="127.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_S_copy (2 samples, 0.04%)</title><rect x="5.8483%" y="101" width="0.0445%" height="15" fill="rgb(242,17,10)" fg:x="263" fg:w="2"/><text x="6.0983%" y="111.50"></text></g><g><title>std::char_traits&lt;char&gt;::copy (2 samples, 0.04%)</title><rect x="5.8483%" y="85" width="0.0445%" height="15" fill="rgb(242,107,0)" fg:x="263" fg:w="2"/><text x="6.0983%" y="95.50"></text></g><g><title>[libc.so.6] (2 samples, 0.04%)</title><rect x="5.8483%" y="69" width="0.0445%" height="15" fill="rgb(251,28,31)" fg:x="263" fg:w="2"/><text x="6.0983%" y="79.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_append (11 samples, 0.24%)</title><rect x="5.6704%" y="133" width="0.2446%" height="15" fill="rgb(233,223,10)" fg:x="255" fg:w="11"/><text x="5.9204%" y="143.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::size (1 samples, 0.02%)</title><rect x="5.8928%" y="117" width="0.0222%" height="15" fill="rgb(215,21,27)" fg:x="265" fg:w="1"/><text x="6.1428%" y="127.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_create (1 samples, 0.02%)</title><rect x="5.9151%" y="133" width="0.0222%" height="15" fill="rgb(232,23,21)" fg:x="266" fg:w="1"/><text x="6.1651%" y="143.50"></text></g><g><title>StreamReassembler::push_substring (80 samples, 1.78%)</title><rect x="4.1806%" y="149" width="1.7790%" height="15" fill="rgb(244,5,23)" fg:x="188" fg:w="80"/><text x="4.4306%" y="159.50">S..</text></g><g><title>std::__detail::_List_node_base::_M_unhook (1 samples, 0.02%)</title><rect x="5.9373%" y="133" width="0.0222%" height="15" fill="rgb(226,81,46)" fg:x="267" fg:w="1"/><text x="6.1873%" y="143.50"></text></g><g><title>StreamReassembler::unassembled_bytes (2 samples, 0.04%)</title><rect x="5.9595%" y="149" width="0.0445%" height="15" fill="rgb(247,70,30)" fg:x="268" fg:w="2"/><text x="6.2095%" y="159.50"></text></g><g><title>_mcount (2 samples, 0.04%)</title><rect x="5.9595%" y="133" width="0.0445%" height="15" fill="rgb(212,68,19)" fg:x="268" fg:w="2"/><text x="6.2095%" y="143.50"></text></g><g><title>[libc.so.6] (2 samples, 0.04%)</title><rect x="5.9595%" y="117" width="0.0445%" height="15" fill="rgb(240,187,13)" fg:x="268" fg:w="2"/><text x="6.2095%" y="127.50"></text></g><g><title>[libc.so.6] (9 samples, 0.20%)</title><rect x="6.0040%" y="149" width="0.2001%" height="15" fill="rgb(223,113,26)" fg:x="270" fg:w="9"/><text x="6.2540%" y="159.50"></text></g><g><title>_mcount (4 samples, 0.09%)</title><rect x="6.2041%" y="149" width="0.0889%" height="15" fill="rgb(206,192,2)" fg:x="279" fg:w="4"/><text x="6.4541%" y="159.50"></text></g><g><title>[libc.so.6] (3 samples, 0.07%)</title><rect x="6.2264%" y="133" width="0.0667%" height="15" fill="rgb(241,108,4)" fg:x="280" fg:w="3"/><text x="6.4764%" y="143.50"></text></g><g><title>cfree (4 samples, 0.09%)</title><rect x="6.2931%" y="149" width="0.0889%" height="15" fill="rgb(247,173,49)" fg:x="283" fg:w="4"/><text x="6.5431%" y="159.50"></text></g><g><title>[libc.so.6] (4 samples, 0.09%)</title><rect x="6.2931%" y="133" width="0.0889%" height="15" fill="rgb(224,114,35)" fg:x="283" fg:w="4"/><text x="6.5431%" y="143.50"></text></g><g><title>operator new (2 samples, 0.04%)</title><rect x="6.3820%" y="149" width="0.0445%" height="15" fill="rgb(245,159,27)" fg:x="287" fg:w="2"/><text x="6.6320%" y="159.50"></text></g><g><title>malloc (1 samples, 0.02%)</title><rect x="6.4043%" y="133" width="0.0222%" height="15" fill="rgb(245,172,44)" fg:x="288" fg:w="1"/><text x="6.6543%" y="143.50"></text></g><g><title>TCPReceiver::segment_received (111 samples, 2.47%)</title><rect x="4.0694%" y="165" width="2.4683%" height="15" fill="rgb(236,23,11)" fg:x="183" fg:w="111"/><text x="4.3194%" y="175.50">TC..</text></g><g><title>unwrap (5 samples, 0.11%)</title><rect x="6.4265%" y="149" width="0.1112%" height="15" fill="rgb(205,117,38)" fg:x="289" fg:w="5"/><text x="6.6765%" y="159.50"></text></g><g><title>_mcount (5 samples, 0.11%)</title><rect x="6.4265%" y="133" width="0.1112%" height="15" fill="rgb(237,72,25)" fg:x="289" fg:w="5"/><text x="6.6765%" y="143.50"></text></g><g><title>[libc.so.6] (4 samples, 0.09%)</title><rect x="6.4487%" y="117" width="0.0889%" height="15" fill="rgb(244,70,9)" fg:x="290" fg:w="4"/><text x="6.6987%" y="127.50"></text></g><g><title>TCPSegment::length_in_sequence_space (1 samples, 0.02%)</title><rect x="6.5377%" y="165" width="0.0222%" height="15" fill="rgb(217,125,39)" fg:x="294" fg:w="1"/><text x="6.7877%" y="175.50"></text></g><g><title>_mcount (1 samples, 0.02%)</title><rect x="6.5377%" y="149" width="0.0222%" height="15" fill="rgb(235,36,10)" fg:x="294" fg:w="1"/><text x="6.7877%" y="159.50"></text></g><g><title>[libc.so.6] (1 samples, 0.02%)</title><rect x="6.5377%" y="133" width="0.0222%" height="15" fill="rgb(251,123,47)" fg:x="294" fg:w="1"/><text x="6.7877%" y="143.50"></text></g><g><title>TCPSegment::length_in_sequence_space (5 samples, 0.11%)</title><rect x="6.6044%" y="149" width="0.1112%" height="15" fill="rgb(221,13,13)" fg:x="297" fg:w="5"/><text x="6.8544%" y="159.50"></text></g><g><title>_mcount (5 samples, 0.11%)</title><rect x="6.6044%" y="133" width="0.1112%" height="15" fill="rgb(238,131,9)" fg:x="297" fg:w="5"/><text x="6.8544%" y="143.50"></text></g><g><title>[libc.so.6] (5 samples, 0.11%)</title><rect x="6.6044%" y="117" width="0.1112%" height="15" fill="rgb(211,50,8)" fg:x="297" fg:w="5"/><text x="6.8544%" y="127.50"></text></g><g><title>_mcount (9 samples, 0.20%)</title><rect x="6.7156%" y="149" width="0.2001%" height="15" fill="rgb(245,182,24)" fg:x="302" fg:w="9"/><text x="6.9656%" y="159.50"></text></g><g><title>[libc.so.6] (7 samples, 0.16%)</title><rect x="6.7601%" y="133" width="0.1557%" height="15" fill="rgb(242,14,37)" fg:x="304" fg:w="7"/><text x="7.0101%" y="143.50"></text></g><g><title>cfree (10 samples, 0.22%)</title><rect x="6.9157%" y="149" width="0.2224%" height="15" fill="rgb(246,228,12)" fg:x="311" fg:w="10"/><text x="7.1657%" y="159.50"></text></g><g><title>[libc.so.6] (9 samples, 0.20%)</title><rect x="6.9380%" y="133" width="0.2001%" height="15" fill="rgb(213,55,15)" fg:x="312" fg:w="9"/><text x="7.1880%" y="143.50"></text></g><g><title>std::_Rb_tree_rebalance_for_erase (4 samples, 0.09%)</title><rect x="7.1381%" y="149" width="0.0889%" height="15" fill="rgb(209,9,3)" fg:x="321" fg:w="4"/><text x="7.3881%" y="159.50"></text></g><g><title>std::_Sp_counted_ptr_inplace&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;void&gt;, (__gnu_cxx::_Lock_policy)2&gt;::_M_destroy (1 samples, 0.02%)</title><rect x="7.2270%" y="149" width="0.0222%" height="15" fill="rgb(230,59,30)" fg:x="325" fg:w="1"/><text x="7.4770%" y="159.50"></text></g><g><title>std::_Sp_counted_ptr_inplace&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;void&gt;, (__gnu_cxx::_Lock_policy)2&gt;::_M_dispose (5 samples, 0.11%)</title><rect x="7.2493%" y="149" width="0.1112%" height="15" fill="rgb(209,121,21)" fg:x="326" fg:w="5"/><text x="7.4993%" y="159.50"></text></g><g><title>_mcount (4 samples, 0.09%)</title><rect x="7.2715%" y="133" width="0.0889%" height="15" fill="rgb(220,109,13)" fg:x="327" fg:w="4"/><text x="7.5215%" y="143.50"></text></g><g><title>[libc.so.6] (3 samples, 0.07%)</title><rect x="7.2938%" y="117" width="0.0667%" height="15" fill="rgb(232,18,1)" fg:x="328" fg:w="3"/><text x="7.5438%" y="127.50"></text></g><g><title>TCPSender::ack_received (41 samples, 0.91%)</title><rect x="6.5599%" y="165" width="0.9117%" height="15" fill="rgb(215,41,42)" fg:x="295" fg:w="41"/><text x="6.8099%" y="175.50"></text></g><g><title>unwrap (5 samples, 0.11%)</title><rect x="7.3605%" y="149" width="0.1112%" height="15" fill="rgb(224,123,36)" fg:x="331" fg:w="5"/><text x="7.6105%" y="159.50"></text></g><g><title>_mcount (5 samples, 0.11%)</title><rect x="7.3605%" y="133" width="0.1112%" height="15" fill="rgb(240,125,3)" fg:x="331" fg:w="5"/><text x="7.6105%" y="143.50"></text></g><g><title>[libc.so.6] (3 samples, 0.07%)</title><rect x="7.4049%" y="117" width="0.0667%" height="15" fill="rgb(205,98,50)" fg:x="333" fg:w="3"/><text x="7.6549%" y="127.50"></text></g><g><title>TCPSender::bytes_in_flight (25 samples, 0.56%)</title><rect x="7.4716%" y="165" width="0.5559%" height="15" fill="rgb(205,185,37)" fg:x="336" fg:w="25"/><text x="7.7216%" y="175.50"></text></g><g><title>_mcount (22 samples, 0.49%)</title><rect x="7.5384%" y="149" width="0.4892%" height="15" fill="rgb(238,207,15)" fg:x="339" fg:w="22"/><text x="7.7884%" y="159.50"></text></g><g><title>[libc.so.6] (20 samples, 0.44%)</title><rect x="7.5828%" y="133" width="0.4447%" height="15" fill="rgb(213,199,42)" fg:x="341" fg:w="20"/><text x="7.8328%" y="143.50"></text></g><g><title>ByteStream::eof (4 samples, 0.09%)</title><rect x="8.2499%" y="149" width="0.0889%" height="15" fill="rgb(235,201,11)" fg:x="371" fg:w="4"/><text x="8.4999%" y="159.50"></text></g><g><title>_mcount (4 samples, 0.09%)</title><rect x="8.2499%" y="133" width="0.0889%" height="15" fill="rgb(207,46,11)" fg:x="371" fg:w="4"/><text x="8.4999%" y="143.50"></text></g><g><title>[libc.so.6] (2 samples, 0.04%)</title><rect x="8.2944%" y="117" width="0.0445%" height="15" fill="rgb(241,35,35)" fg:x="373" fg:w="2"/><text x="8.5444%" y="127.50"></text></g><g><title>[libc.so.6] (18 samples, 0.40%)</title><rect x="8.4056%" y="133" width="0.4003%" height="15" fill="rgb(243,32,47)" fg:x="378" fg:w="18"/><text x="8.6556%" y="143.50"></text></g><g><title>_mcount (7 samples, 0.16%)</title><rect x="8.8059%" y="133" width="0.1557%" height="15" fill="rgb(247,202,23)" fg:x="396" fg:w="7"/><text x="9.0559%" y="143.50"></text></g><g><title>[libc.so.6] (6 samples, 0.13%)</title><rect x="8.8281%" y="117" width="0.1334%" height="15" fill="rgb(219,102,11)" fg:x="397" fg:w="6"/><text x="9.0781%" y="127.50"></text></g><g><title>cfree (1 samples, 0.02%)</title><rect x="8.9615%" y="133" width="0.0222%" height="15" fill="rgb(243,110,44)" fg:x="403" fg:w="1"/><text x="9.2115%" y="143.50"></text></g><g><title>operator delete (1 samples, 0.02%)</title><rect x="8.9838%" y="133" width="0.0222%" height="15" fill="rgb(222,74,54)" fg:x="404" fg:w="1"/><text x="9.2338%" y="143.50"></text></g><g><title>operator new (14 samples, 0.31%)</title><rect x="9.0060%" y="133" width="0.3113%" height="15" fill="rgb(216,99,12)" fg:x="405" fg:w="14"/><text x="9.2560%" y="143.50"></text></g><g><title>malloc (14 samples, 0.31%)</title><rect x="9.0060%" y="117" width="0.3113%" height="15" fill="rgb(226,22,26)" fg:x="405" fg:w="14"/><text x="9.2560%" y="127.50"></text></g><g><title>[libc.so.6] (10 samples, 0.22%)</title><rect x="9.0950%" y="101" width="0.2224%" height="15" fill="rgb(217,163,10)" fg:x="409" fg:w="10"/><text x="9.3450%" y="111.50"></text></g><g><title>[libc.so.6] (2 samples, 0.04%)</title><rect x="9.2728%" y="85" width="0.0445%" height="15" fill="rgb(213,25,53)" fg:x="417" fg:w="2"/><text x="9.5228%" y="95.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_create (1 samples, 0.02%)</title><rect x="9.3173%" y="133" width="0.0222%" height="15" fill="rgb(252,105,26)" fg:x="419" fg:w="1"/><text x="9.5673%" y="143.50"></text></g><g><title>ByteStream::read[abi:cxx11] (254 samples, 5.65%)</title><rect x="8.3389%" y="149" width="5.6482%" height="15" fill="rgb(220,39,43)" fg:x="375" fg:w="254"/><text x="8.5889%" y="159.50">ByteStr..</text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_replace (209 samples, 4.65%)</title><rect x="9.3396%" y="133" width="4.6475%" height="15" fill="rgb(229,68,48)" fg:x="420" fg:w="209"/><text x="9.5896%" y="143.50">std::..</text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_S_move (209 samples, 4.65%)</title><rect x="9.3396%" y="117" width="4.6475%" height="15" fill="rgb(252,8,32)" fg:x="420" fg:w="209"/><text x="9.5896%" y="127.50">std::..</text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_S_move (209 samples, 4.65%)</title><rect x="9.3396%" y="101" width="4.6475%" height="15" fill="rgb(223,20,43)" fg:x="420" fg:w="209"/><text x="9.5896%" y="111.50">std::..</text></g><g><title>std::char_traits&lt;char&gt;::move (209 samples, 4.65%)</title><rect x="9.3396%" y="85" width="4.6475%" height="15" fill="rgb(229,81,49)" fg:x="420" fg:w="209"/><text x="9.5896%" y="95.50">std::..</text></g><g><title>[libc.so.6] (208 samples, 4.63%)</title><rect x="9.3618%" y="69" width="4.6253%" height="15" fill="rgb(236,28,36)" fg:x="421" fg:w="208"/><text x="9.6118%" y="79.50">[libc..</text></g><g><title>TCPSegment::length_in_sequence_space (17 samples, 0.38%)</title><rect x="13.9871%" y="149" width="0.3780%" height="15" fill="rgb(249,185,26)" fg:x="629" fg:w="17"/><text x="14.2371%" y="159.50"></text></g><g><title>_mcount (13 samples, 0.29%)</title><rect x="14.0761%" y="133" width="0.2891%" height="15" fill="rgb(249,174,33)" fg:x="633" fg:w="13"/><text x="14.3261%" y="143.50"></text></g><g><title>[libc.so.6] (7 samples, 0.16%)</title><rect x="14.2095%" y="117" width="0.1557%" height="15" fill="rgb(233,201,37)" fg:x="639" fg:w="7"/><text x="14.4595%" y="127.50"></text></g><g><title>[libc.so.6] (1 samples, 0.02%)</title><rect x="14.3651%" y="149" width="0.0222%" height="15" fill="rgb(221,78,26)" fg:x="646" fg:w="1"/><text x="14.6151%" y="159.50"></text></g><g><title>_mcount (1 samples, 0.02%)</title><rect x="14.3874%" y="149" width="0.0222%" height="15" fill="rgb(250,127,30)" fg:x="647" fg:w="1"/><text x="14.6374%" y="159.50"></text></g><g><title>[libc.so.6] (1 samples, 0.02%)</title><rect x="14.3874%" y="133" width="0.0222%" height="15" fill="rgb(230,49,44)" fg:x="647" fg:w="1"/><text x="14.6374%" y="143.50"></text></g><g><title>cfree (1 samples, 0.02%)</title><rect x="14.4096%" y="149" width="0.0222%" height="15" fill="rgb(229,67,23)" fg:x="648" fg:w="1"/><text x="14.6596%" y="159.50"></text></g><g><title>[libc.so.6] (1 samples, 0.02%)</title><rect x="14.4096%" y="133" width="0.0222%" height="15" fill="rgb(249,83,47)" fg:x="648" fg:w="1"/><text x="14.6596%" y="143.50"></text></g><g><title>operator new (16 samples, 0.36%)</title><rect x="14.4318%" y="149" width="0.3558%" height="15" fill="rgb(215,43,3)" fg:x="649" fg:w="16"/><text x="14.6818%" y="159.50"></text></g><g><title>malloc (16 samples, 0.36%)</title><rect x="14.4318%" y="133" width="0.3558%" height="15" fill="rgb(238,154,13)" fg:x="649" fg:w="16"/><text x="14.6818%" y="143.50"></text></g><g><title>[libc.so.6] (11 samples, 0.24%)</title><rect x="14.5430%" y="117" width="0.2446%" height="15" fill="rgb(219,56,2)" fg:x="654" fg:w="11"/><text x="14.7930%" y="127.50"></text></g><g><title>[libc.so.6] (2 samples, 0.04%)</title><rect x="14.7432%" y="101" width="0.0445%" height="15" fill="rgb(233,0,4)" fg:x="663" fg:w="2"/><text x="14.9932%" y="111.50"></text></g><g><title>_mcount (3 samples, 0.07%)</title><rect x="14.8099%" y="133" width="0.0667%" height="15" fill="rgb(235,30,7)" fg:x="666" fg:w="3"/><text x="15.0599%" y="143.50"></text></g><g><title>[libc.so.6] (2 samples, 0.04%)</title><rect x="14.8321%" y="117" width="0.0445%" height="15" fill="rgb(250,79,13)" fg:x="667" fg:w="2"/><text x="15.0821%" y="127.50"></text></g><g><title>operator new (6 samples, 0.13%)</title><rect x="14.8766%" y="133" width="0.1334%" height="15" fill="rgb(211,146,34)" fg:x="669" fg:w="6"/><text x="15.1266%" y="143.50"></text></g><g><title>malloc (6 samples, 0.13%)</title><rect x="14.8766%" y="117" width="0.1334%" height="15" fill="rgb(228,22,38)" fg:x="669" fg:w="6"/><text x="15.1266%" y="127.50"></text></g><g><title>[libc.so.6] (5 samples, 0.11%)</title><rect x="14.8988%" y="101" width="0.1112%" height="15" fill="rgb(235,168,5)" fg:x="670" fg:w="5"/><text x="15.1488%" y="111.50"></text></g><g><title>std::_Rb_tree&lt;unsigned long, std::pair&lt;unsigned long const, TCPSegment&gt;, std::_Select1st&lt;std::pair&lt;unsigned long const, TCPSegment&gt; &gt;, std::less&lt;unsigned long&gt;, std::allocator&lt;std::pair&lt;unsigned long const, TCPSegment&gt; &gt; &gt;::_M_emplace_hint_unique&lt;std::pair&lt;unsigned long, TCPSegment&gt; &gt; (15 samples, 0.33%)</title><rect x="14.7876%" y="149" width="0.3336%" height="15" fill="rgb(221,155,16)" fg:x="665" fg:w="15"/><text x="15.0376%" y="159.50"></text></g><g><title>std::_Rb_tree_insert_and_rebalance (5 samples, 0.11%)</title><rect x="15.0100%" y="133" width="0.1112%" height="15" fill="rgb(215,215,53)" fg:x="675" fg:w="5"/><text x="15.2600%" y="143.50"></text></g><g><title>std::_Rb_tree_insert_and_rebalance (1 samples, 0.02%)</title><rect x="15.0990%" y="117" width="0.0222%" height="15" fill="rgb(223,4,10)" fg:x="679" fg:w="1"/><text x="15.3490%" y="127.50"></text></g><g><title>std::_Sp_counted_ptr_inplace&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;void&gt;, (__gnu_cxx::_Lock_policy)2&gt;::_M_dispose (6 samples, 0.13%)</title><rect x="15.1212%" y="149" width="0.1334%" height="15" fill="rgb(234,103,6)" fg:x="680" fg:w="6"/><text x="15.3712%" y="159.50"></text></g><g><title>_mcount (6 samples, 0.13%)</title><rect x="15.1212%" y="133" width="0.1334%" height="15" fill="rgb(227,97,0)" fg:x="680" fg:w="6"/><text x="15.3712%" y="143.50"></text></g><g><title>[libc.so.6] (5 samples, 0.11%)</title><rect x="15.1434%" y="117" width="0.1112%" height="15" fill="rgb(234,150,53)" fg:x="681" fg:w="5"/><text x="15.3934%" y="127.50"></text></g><g><title>std::deque&lt;TCPSegment, std::allocator&lt;TCPSegment&gt; &gt;::_M_push_back_aux&lt;TCPSegment const&amp;&gt; (1 samples, 0.02%)</title><rect x="15.2546%" y="149" width="0.0222%" height="15" fill="rgb(228,201,54)" fg:x="686" fg:w="1"/><text x="15.5046%" y="159.50"></text></g><g><title>operator new (1 samples, 0.02%)</title><rect x="15.2546%" y="133" width="0.0222%" height="15" fill="rgb(222,22,37)" fg:x="686" fg:w="1"/><text x="15.5046%" y="143.50"></text></g><g><title>TCPSender::fill_window (330 samples, 7.34%)</title><rect x="8.0276%" y="165" width="7.3382%" height="15" fill="rgb(237,53,32)" fg:x="361" fg:w="330"/><text x="8.2776%" y="175.50">TCPSender:..</text></g><g><title>wrap (4 samples, 0.09%)</title><rect x="15.2769%" y="149" width="0.0889%" height="15" fill="rgb(233,25,53)" fg:x="687" fg:w="4"/><text x="15.5269%" y="159.50"></text></g><g><title>_mcount (4 samples, 0.09%)</title><rect x="15.2769%" y="133" width="0.0889%" height="15" fill="rgb(210,40,34)" fg:x="687" fg:w="4"/><text x="15.5269%" y="143.50"></text></g><g><title>[libc.so.6] (3 samples, 0.07%)</title><rect x="15.2991%" y="117" width="0.0667%" height="15" fill="rgb(241,220,44)" fg:x="688" fg:w="3"/><text x="15.5491%" y="127.50"></text></g><g><title>_mcount (1 samples, 0.02%)</title><rect x="15.3880%" y="149" width="0.0222%" height="15" fill="rgb(235,28,35)" fg:x="692" fg:w="1"/><text x="15.6380%" y="159.50"></text></g><g><title>[libc.so.6] (1 samples, 0.02%)</title><rect x="15.3880%" y="133" width="0.0222%" height="15" fill="rgb(210,56,17)" fg:x="692" fg:w="1"/><text x="15.6380%" y="143.50"></text></g><g><title>std::deque&lt;TCPSegment, std::allocator&lt;TCPSegment&gt; &gt;::_M_push_back_aux&lt;TCPSegment const&amp;&gt; (1 samples, 0.02%)</title><rect x="15.4103%" y="149" width="0.0222%" height="15" fill="rgb(224,130,29)" fg:x="693" fg:w="1"/><text x="15.6603%" y="159.50"></text></g><g><title>_mcount (1 samples, 0.02%)</title><rect x="15.4103%" y="133" width="0.0222%" height="15" fill="rgb(235,212,8)" fg:x="693" fg:w="1"/><text x="15.6603%" y="143.50"></text></g><g><title>[libc.so.6] (1 samples, 0.02%)</title><rect x="15.4103%" y="117" width="0.0222%" height="15" fill="rgb(223,33,50)" fg:x="693" fg:w="1"/><text x="15.6603%" y="127.50"></text></g><g><title>TCPSender::send_empty_segment (9 samples, 0.20%)</title><rect x="15.3658%" y="165" width="0.2001%" height="15" fill="rgb(219,149,13)" fg:x="691" fg:w="9"/><text x="15.6158%" y="175.50"></text></g><g><title>wrap (6 samples, 0.13%)</title><rect x="15.4325%" y="149" width="0.1334%" height="15" fill="rgb(250,156,29)" fg:x="694" fg:w="6"/><text x="15.6825%" y="159.50"></text></g><g><title>_mcount (5 samples, 0.11%)</title><rect x="15.4547%" y="133" width="0.1112%" height="15" fill="rgb(216,193,19)" fg:x="695" fg:w="5"/><text x="15.7047%" y="143.50"></text></g><g><title>[libc.so.6] (3 samples, 0.07%)</title><rect x="15.4992%" y="117" width="0.0667%" height="15" fill="rgb(216,135,14)" fg:x="697" fg:w="3"/><text x="15.7492%" y="127.50"></text></g><g><title>TCPConnection::segment_received (541 samples, 12.03%)</title><rect x="3.7136%" y="181" width="12.0302%" height="15" fill="rgb(241,47,5)" fg:x="167" fg:w="541"/><text x="3.9636%" y="191.50">TCPConnection::seg..</text></g><g><title>_mcount (8 samples, 0.18%)</title><rect x="15.5659%" y="165" width="0.1779%" height="15" fill="rgb(233,42,35)" fg:x="700" fg:w="8"/><text x="15.8159%" y="175.50"></text></g><g><title>[libc.so.6] (5 samples, 0.11%)</title><rect x="15.6326%" y="149" width="0.1112%" height="15" fill="rgb(231,13,6)" fg:x="703" fg:w="5"/><text x="15.8826%" y="159.50"></text></g><g><title>ByteStream::eof (2 samples, 0.04%)</title><rect x="15.9440%" y="165" width="0.0445%" height="15" fill="rgb(207,181,40)" fg:x="717" fg:w="2"/><text x="16.1940%" y="175.50"></text></g><g><title>_mcount (2 samples, 0.04%)</title><rect x="15.9440%" y="149" width="0.0445%" height="15" fill="rgb(254,173,49)" fg:x="717" fg:w="2"/><text x="16.1940%" y="159.50"></text></g><g><title>[libc.so.6] (2 samples, 0.04%)</title><rect x="15.9440%" y="133" width="0.0445%" height="15" fill="rgb(221,1,38)" fg:x="717" fg:w="2"/><text x="16.1940%" y="143.50"></text></g><g><title>ByteStream::input_ended (5 samples, 0.11%)</title><rect x="15.9884%" y="165" width="0.1112%" height="15" fill="rgb(206,124,46)" fg:x="719" fg:w="5"/><text x="16.2384%" y="175.50"></text></g><g><title>_mcount (5 samples, 0.11%)</title><rect x="15.9884%" y="149" width="0.1112%" height="15" fill="rgb(249,21,11)" fg:x="719" fg:w="5"/><text x="16.2384%" y="159.50"></text></g><g><title>[libc.so.6] (5 samples, 0.11%)</title><rect x="15.9884%" y="133" width="0.1112%" height="15" fill="rgb(222,201,40)" fg:x="719" fg:w="5"/><text x="16.2384%" y="143.50"></text></g><g><title>ByteStream::bytes_written (19 samples, 0.42%)</title><rect x="16.3220%" y="149" width="0.4225%" height="15" fill="rgb(235,61,29)" fg:x="734" fg:w="19"/><text x="16.5720%" y="159.50"></text></g><g><title>_mcount (19 samples, 0.42%)</title><rect x="16.3220%" y="133" width="0.4225%" height="15" fill="rgb(219,207,3)" fg:x="734" fg:w="19"/><text x="16.5720%" y="143.50"></text></g><g><title>[libc.so.6] (16 samples, 0.36%)</title><rect x="16.3887%" y="117" width="0.3558%" height="15" fill="rgb(222,56,46)" fg:x="737" fg:w="16"/><text x="16.6387%" y="127.50"></text></g><g><title>ByteStream::input_ended (13 samples, 0.29%)</title><rect x="16.7445%" y="149" width="0.2891%" height="15" fill="rgb(239,76,54)" fg:x="753" fg:w="13"/><text x="16.9945%" y="159.50"></text></g><g><title>_mcount (11 samples, 0.24%)</title><rect x="16.7890%" y="133" width="0.2446%" height="15" fill="rgb(231,124,27)" fg:x="755" fg:w="11"/><text x="17.0390%" y="143.50"></text></g><g><title>[libc.so.6] (10 samples, 0.22%)</title><rect x="16.8112%" y="117" width="0.2224%" height="15" fill="rgb(249,195,6)" fg:x="756" fg:w="10"/><text x="17.0612%" y="127.50"></text></g><g><title>_mcount (5 samples, 0.11%)</title><rect x="17.0336%" y="149" width="0.1112%" height="15" fill="rgb(237,174,47)" fg:x="766" fg:w="5"/><text x="17.2836%" y="159.50"></text></g><g><title>[libc.so.6] (4 samples, 0.09%)</title><rect x="17.0558%" y="133" width="0.0889%" height="15" fill="rgb(206,201,31)" fg:x="767" fg:w="4"/><text x="17.3058%" y="143.50"></text></g><g><title>TCPReceiver::ackno (53 samples, 1.18%)</title><rect x="16.0996%" y="165" width="1.1786%" height="15" fill="rgb(231,57,52)" fg:x="724" fg:w="53"/><text x="16.3496%" y="175.50"></text></g><g><title>wrap (6 samples, 0.13%)</title><rect x="17.1448%" y="149" width="0.1334%" height="15" fill="rgb(248,177,22)" fg:x="771" fg:w="6"/><text x="17.3948%" y="159.50"></text></g><g><title>_mcount (6 samples, 0.13%)</title><rect x="17.1448%" y="133" width="0.1334%" height="15" fill="rgb(215,211,37)" fg:x="771" fg:w="6"/><text x="17.3948%" y="143.50"></text></g><g><title>[libc.so.6] (3 samples, 0.07%)</title><rect x="17.2115%" y="117" width="0.0667%" height="15" fill="rgb(241,128,51)" fg:x="774" fg:w="3"/><text x="17.4615%" y="127.50"></text></g><g><title>TCPReceiver::window_size (7 samples, 0.16%)</title><rect x="17.2782%" y="165" width="0.1557%" height="15" fill="rgb(227,165,31)" fg:x="777" fg:w="7"/><text x="17.5282%" y="175.50"></text></g><g><title>_mcount (6 samples, 0.13%)</title><rect x="17.3004%" y="149" width="0.1334%" height="15" fill="rgb(228,167,24)" fg:x="778" fg:w="6"/><text x="17.5504%" y="159.50"></text></g><g><title>[libc.so.6] (3 samples, 0.07%)</title><rect x="17.3671%" y="133" width="0.0667%" height="15" fill="rgb(228,143,12)" fg:x="781" fg:w="3"/><text x="17.6171%" y="143.50"></text></g><g><title>_mcount (4 samples, 0.09%)</title><rect x="17.4338%" y="165" width="0.0889%" height="15" fill="rgb(249,149,8)" fg:x="784" fg:w="4"/><text x="17.6838%" y="175.50"></text></g><g><title>[libc.so.6] (3 samples, 0.07%)</title><rect x="17.4561%" y="149" width="0.0667%" height="15" fill="rgb(243,35,44)" fg:x="785" fg:w="3"/><text x="17.7061%" y="159.50"></text></g><g><title>cfree (2 samples, 0.04%)</title><rect x="17.5228%" y="165" width="0.0445%" height="15" fill="rgb(246,89,9)" fg:x="788" fg:w="2"/><text x="17.7728%" y="175.50"></text></g><g><title>[libc.so.6] (1 samples, 0.02%)</title><rect x="17.5450%" y="149" width="0.0222%" height="15" fill="rgb(233,213,13)" fg:x="789" fg:w="1"/><text x="17.7950%" y="159.50"></text></g><g><title>TCPConnection::send_segments (83 samples, 1.85%)</title><rect x="15.7438%" y="181" width="1.8457%" height="15" fill="rgb(233,141,41)" fg:x="708" fg:w="83"/><text x="15.9938%" y="191.50">T..</text></g><g><title>std::deque&lt;TCPSegment, std::allocator&lt;TCPSegment&gt; &gt;::_M_push_back_aux&lt;TCPSegment const&amp;&gt; (1 samples, 0.02%)</title><rect x="17.5673%" y="165" width="0.0222%" height="15" fill="rgb(239,167,4)" fg:x="790" fg:w="1"/><text x="17.8173%" y="175.50"></text></g><g><title>operator new (1 samples, 0.02%)</title><rect x="17.5673%" y="149" width="0.0222%" height="15" fill="rgb(209,217,16)" fg:x="790" fg:w="1"/><text x="17.8173%" y="159.50"></text></g><g><title>malloc (1 samples, 0.02%)</title><rect x="17.5673%" y="133" width="0.0222%" height="15" fill="rgb(219,88,35)" fg:x="790" fg:w="1"/><text x="17.8173%" y="143.50"></text></g><g><title>cfree (1 samples, 0.02%)</title><rect x="17.5895%" y="181" width="0.0222%" height="15" fill="rgb(220,193,23)" fg:x="791" fg:w="1"/><text x="17.8395%" y="191.50"></text></g><g><title>[libc.so.6] (1 samples, 0.02%)</title><rect x="17.5895%" y="165" width="0.0222%" height="15" fill="rgb(230,90,52)" fg:x="791" fg:w="1"/><text x="17.8395%" y="175.50"></text></g><g><title>[libc.so.6] (1 samples, 0.02%)</title><rect x="17.5895%" y="149" width="0.0222%" height="15" fill="rgb(252,106,19)" fg:x="791" fg:w="1"/><text x="17.8395%" y="159.50"></text></g><g><title>_mcount (1 samples, 0.02%)</title><rect x="17.6117%" y="165" width="0.0222%" height="15" fill="rgb(206,74,20)" fg:x="792" fg:w="1"/><text x="17.8617%" y="175.50"></text></g><g><title>[libc.so.6] (1 samples, 0.02%)</title><rect x="17.6117%" y="149" width="0.0222%" height="15" fill="rgb(230,138,44)" fg:x="792" fg:w="1"/><text x="17.8617%" y="159.50"></text></g><g><title>move_segments (634 samples, 14.10%)</title><rect x="3.6024%" y="197" width="14.0983%" height="15" fill="rgb(235,182,43)" fg:x="162" fg:w="634"/><text x="3.8524%" y="207.50">move_segments</text></g><g><title>std::vector&lt;TCPSegment, std::allocator&lt;TCPSegment&gt; &gt;::_M_realloc_insert&lt;TCPSegment&gt; (4 samples, 0.09%)</title><rect x="17.6117%" y="181" width="0.0889%" height="15" fill="rgb(242,16,51)" fg:x="792" fg:w="4"/><text x="17.8617%" y="191.50"></text></g><g><title>operator new (3 samples, 0.07%)</title><rect x="17.6340%" y="165" width="0.0667%" height="15" fill="rgb(248,9,4)" fg:x="793" fg:w="3"/><text x="17.8840%" y="175.50"></text></g><g><title>malloc (3 samples, 0.07%)</title><rect x="17.6340%" y="149" width="0.0667%" height="15" fill="rgb(210,31,22)" fg:x="793" fg:w="3"/><text x="17.8840%" y="159.50"></text></g><g><title>[libc.so.6] (1 samples, 0.02%)</title><rect x="17.6785%" y="133" width="0.0222%" height="15" fill="rgb(239,54,39)" fg:x="795" fg:w="1"/><text x="17.9285%" y="143.50"></text></g><g><title>main_loop (698 samples, 15.52%)</title><rect x="2.4905%" y="213" width="15.5215%" height="15" fill="rgb(230,99,41)" fg:x="112" fg:w="698"/><text x="2.7405%" y="223.50">main_loop</text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_append (14 samples, 0.31%)</title><rect x="17.7007%" y="197" width="0.3113%" height="15" fill="rgb(253,106,12)" fg:x="796" fg:w="14"/><text x="17.9507%" y="207.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_S_copy (14 samples, 0.31%)</title><rect x="17.7007%" y="181" width="0.3113%" height="15" fill="rgb(213,46,41)" fg:x="796" fg:w="14"/><text x="17.9507%" y="191.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_S_copy (14 samples, 0.31%)</title><rect x="17.7007%" y="165" width="0.3113%" height="15" fill="rgb(215,133,35)" fg:x="796" fg:w="14"/><text x="17.9507%" y="175.50"></text></g><g><title>std::char_traits&lt;char&gt;::copy (14 samples, 0.31%)</title><rect x="17.7007%" y="149" width="0.3113%" height="15" fill="rgb(213,28,5)" fg:x="796" fg:w="14"/><text x="17.9507%" y="159.50"></text></g><g><title>[libc.so.6] (14 samples, 0.31%)</title><rect x="17.7007%" y="133" width="0.3113%" height="15" fill="rgb(215,77,49)" fg:x="796" fg:w="14"/><text x="17.9507%" y="143.50"></text></g><g><title>[unknown] (11 samples, 0.24%)</title><rect x="17.7674%" y="117" width="0.2446%" height="15" fill="rgb(248,100,22)" fg:x="799" fg:w="11"/><text x="18.0174%" y="127.50"></text></g><g><title>[unknown] (6 samples, 0.13%)</title><rect x="17.8786%" y="101" width="0.1334%" height="15" fill="rgb(208,67,9)" fg:x="804" fg:w="6"/><text x="18.1286%" y="111.50"></text></g><g><title>[unknown] (5 samples, 0.11%)</title><rect x="17.9008%" y="85" width="0.1112%" height="15" fill="rgb(219,133,21)" fg:x="805" fg:w="5"/><text x="18.1508%" y="95.50"></text></g><g><title>[unknown] (5 samples, 0.11%)</title><rect x="17.9008%" y="69" width="0.1112%" height="15" fill="rgb(246,46,29)" fg:x="805" fg:w="5"/><text x="18.1508%" y="79.50"></text></g><g><title>[unknown] (2 samples, 0.04%)</title><rect x="17.9675%" y="53" width="0.0445%" height="15" fill="rgb(246,185,52)" fg:x="808" fg:w="2"/><text x="18.2175%" y="63.50"></text></g><g><title>[unknown] (3 samples, 0.07%)</title><rect x="92.9286%" y="181" width="0.0667%" height="15" fill="rgb(252,136,11)" fg:x="4179" fg:w="3"/><text x="93.1786%" y="191.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="92.9731%" y="165" width="0.0222%" height="15" fill="rgb(219,138,53)" fg:x="4181" fg:w="1"/><text x="93.2231%" y="175.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="92.9731%" y="149" width="0.0222%" height="15" fill="rgb(211,51,23)" fg:x="4181" fg:w="1"/><text x="93.2231%" y="159.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="92.9731%" y="133" width="0.0222%" height="15" fill="rgb(247,221,28)" fg:x="4181" fg:w="1"/><text x="93.2231%" y="143.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="92.9731%" y="117" width="0.0222%" height="15" fill="rgb(251,222,45)" fg:x="4181" fg:w="1"/><text x="93.2231%" y="127.50"></text></g><g><title>rand (3,591 samples, 79.85%)</title><rect x="18.0120%" y="213" width="79.8532%" height="15" fill="rgb(217,162,53)" fg:x="810" fg:w="3591"/><text x="18.2620%" y="223.50">rand</text></g><g><title>random (3,536 samples, 78.63%)</title><rect x="19.2350%" y="197" width="78.6302%" height="15" fill="rgb(229,93,14)" fg:x="865" fg:w="3536"/><text x="19.4850%" y="207.50">random</text></g><g><title>random_r (219 samples, 4.87%)</title><rect x="92.9953%" y="181" width="4.8699%" height="15" fill="rgb(209,67,49)" fg:x="4182" fg:w="219"/><text x="93.2453%" y="191.50">random..</text></g><g><title>rand@plt (43 samples, 0.96%)</title><rect x="97.8652%" y="213" width="0.9562%" height="15" fill="rgb(213,87,29)" fg:x="4401" fg:w="43"/><text x="98.1152%" y="223.50"></text></g><g><title>all (4,497 samples, 100%)</title><rect x="0.0000%" y="325" width="100.0000%" height="15" fill="rgb(205,151,52)" fg:x="0" fg:w="4497"/><text x="0.2500%" y="335.50"></text></g><g><title>tcp_benchmark (4,497 samples, 100.00%)</title><rect x="0.0000%" y="309" width="100.0000%" height="15" fill="rgb(253,215,39)" fg:x="0" fg:w="4497"/><text x="0.2500%" y="319.50">tcp_benchmark</text></g><g><title>_start (4,489 samples, 99.82%)</title><rect x="0.1779%" y="293" width="99.8221%" height="15" fill="rgb(221,220,41)" fg:x="8" fg:w="4489"/><text x="0.4279%" y="303.50">_start</text></g><g><title>__libc_start_main (4,489 samples, 99.82%)</title><rect x="0.1779%" y="277" width="99.8221%" height="15" fill="rgb(218,133,21)" fg:x="8" fg:w="4489"/><text x="0.4279%" y="287.50">__libc_start_main</text></g><g><title>[libc.so.6] (4,489 samples, 99.82%)</title><rect x="0.1779%" y="261" width="99.8221%" height="15" fill="rgb(221,193,43)" fg:x="8" fg:w="4489"/><text x="0.4279%" y="271.50">[libc.so.6]</text></g><g><title>main (4,489 samples, 99.82%)</title><rect x="0.1779%" y="245" width="99.8221%" height="15" fill="rgb(240,128,52)" fg:x="8" fg:w="4489"/><text x="0.4279%" y="255.50">main</text></g><g><title>main_loop (4,489 samples, 99.82%)</title><rect x="0.1779%" y="229" width="99.8221%" height="15" fill="rgb(253,114,12)" fg:x="8" fg:w="4489"/><text x="0.4279%" y="239.50">main_loop</text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_construct (53 samples, 1.18%)</title><rect x="98.8214%" y="213" width="1.1786%" height="15" fill="rgb(215,223,47)" fg:x="4444" fg:w="53"/><text x="99.0714%" y="223.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_S_assign (53 samples, 1.18%)</title><rect x="98.8214%" y="197" width="1.1786%" height="15" fill="rgb(248,225,23)" fg:x="4444" fg:w="53"/><text x="99.0714%" y="207.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_S_assign (53 samples, 1.18%)</title><rect x="98.8214%" y="181" width="1.1786%" height="15" fill="rgb(250,108,0)" fg:x="4444" fg:w="53"/><text x="99.0714%" y="191.50"></text></g><g><title>std::char_traits&lt;char&gt;::assign (53 samples, 1.18%)</title><rect x="98.8214%" y="165" width="1.1786%" height="15" fill="rgb(228,208,7)" fg:x="4444" fg:w="53"/><text x="99.0714%" y="175.50"></text></g><g><title>[libc.so.6] (53 samples, 1.18%)</title><rect x="98.8214%" y="149" width="1.1786%" height="15" fill="rgb(244,45,10)" fg:x="4444" fg:w="53"/><text x="99.0714%" y="159.50"></text></g><g><title>[unknown] (50 samples, 1.11%)</title><rect x="98.8881%" y="133" width="1.1119%" height="15" fill="rgb(207,125,25)" fg:x="4447" fg:w="50"/><text x="99.1381%" y="143.50"></text></g><g><title>[unknown] (33 samples, 0.73%)</title><rect x="99.2662%" y="117" width="0.7338%" height="15" fill="rgb(210,195,18)" fg:x="4464" fg:w="33"/><text x="99.5162%" y="127.50"></text></g><g><title>[unknown] (28 samples, 0.62%)</title><rect x="99.3774%" y="101" width="0.6226%" height="15" fill="rgb(249,80,12)" fg:x="4469" fg:w="28"/><text x="99.6274%" y="111.50"></text></g><g><title>[unknown] (25 samples, 0.56%)</title><rect x="99.4441%" y="85" width="0.5559%" height="15" fill="rgb(221,65,9)" fg:x="4472" fg:w="25"/><text x="99.6941%" y="95.50"></text></g><g><title>[unknown] (11 samples, 0.24%)</title><rect x="99.7554%" y="69" width="0.2446%" height="15" fill="rgb(235,49,36)" fg:x="4486" fg:w="11"/><text x="100.0054%" y="79.50"></text></g><g><title>[unknown] (3 samples, 0.07%)</title><rect x="99.9333%" y="53" width="0.0667%" height="15" fill="rgb(225,32,20)" fg:x="4494" fg:w="3"/><text x="100.1833%" y="63.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="99.9778%" y="37" width="0.0222%" height="15" fill="rgb(215,141,46)" fg:x="4496" fg:w="1"/><text x="100.2278%" y="47.50"></text></g></svg></svg>